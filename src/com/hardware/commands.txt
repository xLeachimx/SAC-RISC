Command format:
---------------------------------------------------
<Command code>: <name> <argument1> <argument2> ...

Special Commands:
---------------------------------------------------
0x00: NOP
    Description:
        A null operation.
0x01: INPUT
    Description:
        Request a 32-bit integer from the console.
        Stores the value in $rs.
0x02: INPUT_CHAR
    Description:
        Request a single character from the console.
        Stores the value in $rs.
0xFF: HALT
    Description:
        Halts execution.


Register-Register Commands:
---------------------------------------------------
0x03: ADD <reg1> <reg2> <reg3>
    Description:
        Adds the value in <reg1> to the value in
        <reg2> and stores the result in <reg3>.
0x04: SUBT <reg1> <reg2> <reg3>
    Description:
        Subtracts the value in <reg1> by the
        value in <reg2> and stores the result in
        <reg3>.
0x05: MULT <reg1> <reg2> <reg3>
    Description:
        Multiplies the value in <reg1> with the
        value in <reg2> and stores the result in
        <reg3>.
0x06: DIV <reg1> <reg2> <reg3>
    Description:
        Divides the value in <reg1> by the
        value in <reg2> and stores the result in
        <reg3>.
0x07: NEG <reg1> <reg2>
    Description:
        Stores the bitwise negation of the value in
        <reg1> in <reg2>
0x08: AND <reg1> <reg2> <reg3>
    Description:
        Bitwise ANDs the values in <reg1> and <reg2>
        and stores the result in <reg3>
0x09: OR <reg1> <reg2> <reg3>
    Description:
        Bitwise ORs the value in <reg1> and <reg2>
        and stores the result in <reg3>
0x0A: LSHIFT <reg1> <reg2>
    Description:
        Shift the value in <reg1> left by 1 and store
        the result in <reg2>.
0x0B: RSHIFT <reg1> <reg2>
    Description:
        Shift the value in <reg1> right by 1 and store
        the result in <reg2>.
0x0C: GT <reg1> <reg2> <reg3>
    Description:
        Compares the values in <reg1> and <reg2> and
        stores 1 in <reg3> if the value in <reg1> is
        greater than <reg2>. Stores 0 in <reg3>
        otherwise.
0x0D: LT <reg1> <reg2> <reg3>
    Description:
        Compares the values in <reg1> and <reg2> and
        stores 1 in <reg3> if the value in <reg1> is
        less than <reg2>. Stores 0 in <reg3>
        otherwise.
0x0E: EQ <reg1> <reg2> <reg3>
    Description:
        Compares the values in <reg1> and <reg2> and
        stores 1 in <reg3> if the value in <reg1> is
        equal to <reg2>. Stores 0 in <reg3>
        otherwise.
0x0F: BRANCH <reg1> <reg2>
    Description:
        Loads <reg2> into $pc if the value in <reg1>
        is non-zero.
0x10: JUMP <reg1>
    Description:
       Loads the value in <reg1> into $pc.
0x11: COPY <reg1> <reg2>
    Description:
        Copies the value in <reg1> into the value in <reg2>.
0x12: OUTPUT <reg1>
    Description:
        Writes the integer value stored in <reg1>
        to the console.
0x13: OUTPUT_CHAR <reg1>
    Description:
        Writes the character value stored in <reg1>
        to the console. (Only the least sig bytes will
        be converted.)
0x14: PUSH_STK <reg1>
    Description:
        Pushes the value in <reg1> onto the stack.
0x15: POP_STK <reg1>
    Description:
        Pops the 32-bit value on top of stack and
        stores it in <reg1>.

Address Commands:
---------------------------------------------------
0x17: LOAD <reg1> <reg2>
    Description:
        Load the 32-bit value at the address stored
        in <reg1> into <reg2>.
0x18: LOAD_BYTE <reg1> <reg2>
    Description:
        Load the byte at the address stored
        in <reg1> into <reg2>.
0x19: STORE <reg1> <reg2>
    Description:
        Store the 32-bit value in <reg2> at the
        address stored in <reg1>.
0x1A: STORE_BYTE <reg1> <reg2>
    Description:
        Store the least sig byte of the value in <reg2>
        into RAM at the address stored in
        <reg1>.
0x1B: OUTPUT_STR <reg1>
    Description:
        Write the null terminated string stored at
        the address stored in <reg1> to the console.
0x1C: CORE_DUMP <reg1> <reg2>
    Description:
        Write a number of values equal to the value
        stored in <reg2> starting at the address
        stored in <reg1> to the console.

Literal Commands:
----------------------------------------------------
0x1D: LOAD_LIT <number literal>
    Description:
        Loads <number literal> into $rs.
0x1E: JUMP_LABEL <LABEL>
    Description:
        Loads <number literal> into $pc.
0x1F: BRANCH_LABEL <reg> <number literal>
    Description:
        Loads <number literal> into $pc if the value in
        <reg> is non-zero.